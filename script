import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

// Set up scene, camera, and renderer
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('cubeCanvas') });
renderer.setSize(600, 600);

document.body.appendChild(renderer.domElement);

// Add controls
const controls = new OrbitControls(camera, renderer.domElement);
camera.position.z = 5;

// Define colors for each face
const colors = {
    white: 0xffffff,
    yellow: 0xffff00,
    red: 0xff0000,
    orange: 0xffa500,
    blue: 0x0000ff,
    green: 0x008000
};

// Create a 3x3 Rubik's Cube with colors
const cubeSize = 1;
const cubes = [];
const offsets = [-1, 0, 1];

for (let x of offsets) {
    for (let y of offsets) {
        for (let z of offsets) {
            const geometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize);
            const materials = [
                new THREE.MeshBasicMaterial({ color: colors.white }),
                new THREE.MeshBasicMaterial({ color: colors.yellow }),
                new THREE.MeshBasicMaterial({ color: colors.red }),
                new THREE.MeshBasicMaterial({ color: colors.orange }),
                new THREE.MeshBasicMaterial({ color: colors.blue }),
                new THREE.MeshBasicMaterial({ color: colors.green })
            ];
            const miniCube = new THREE.Mesh(geometry, materials);
            miniCube.position.set(x * cubeSize, y * cubeSize, z * cubeSize);
            scene.add(miniCube);
            cubes.push(miniCube);
        }
    }
}

// Rotate layers
function rotateLayer(axis, index, direction) {
    const angle = (Math.PI / 2) * direction;
    cubes.forEach(cube => {
        if (Math.round(cube.position[axis]) === index) {
            cube.rotation[axis] += angle;
        }
    });
}

document.addEventListener("keydown", (event) => {
    if (event.key === "x") rotateLayer("x", 1, 1);  // Example: Rotate x-layer
    if (event.key === "y") rotateLayer("y", 1, -1); // Example: Rotate y-layer
});

// CFOP solving algorithm placeholder
function solveCubeCFOP() {
    console.log("Solving the cube using CFOP...");
    
    // CFOP Steps
    firstCross();
    firstTwoLayers();
    orientLastLayer();
    permuteLastLayer();
}

function firstCross() {
    console.log("Step 1: Solving the first cross...");
    // Implement first cross logic here
}

function firstTwoLayers() {
    console.log("Step 2: Solving the first two layers...");
    // Implement F2L logic here
}

function orientLastLayer() {
    console.log("Step 3: Orienting the last layer...");
    // Implement OLL logic here
}

function permuteLastLayer() {
    console.log("Step 4: Permuting the last layer...");
    // Implement PLL logic here
}

document.getElementById("solveButton").addEventListener("click", solveCubeCFOP);

// Animation loop
function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
}
animate();
